groupsdf$description <- gsub("<p>", "", groupsdf$description)
groupsdf$description <- gsub("</p>", "", groupsdf$description)
selGroups <- dplyr::select(groupsdf[which(groupsdf$courseid == courseid & groupsdf$description %in% keys),], id,
name, key = description)
selGrpMembers <- dplyr::select(merge(membersdf, selGroups, by.x = "groupid", by.y = "id"), userid, group = name, key)
return(selGrpMembers)
}
# Create list of users in a given course
lstEnrolUsers <- EnrolledUsers(dfUsers, dfUser_Enrol, dfEnrol, dfCourse, "CFA")
lstEnrolUsers$users <- select(lstEnrolUsers$users, firstname, lastname, email, moodleID = id)
# Attach groups to each user
vecKeys <- c("BMC01@ArnhemS1Y15",
"BMC02@ArnhemS1Y15",
"BMC03@ArnhemS1Y15",
"BMC01@NijmegenS1Y15",
"BMC02@NijmegenS1Y15",
"BMC03@NijmegenS1Y15",
"BMC04@NijmegenS1Y15",
"BMS01@ArnhemS1Y15",
"BMS01@NijmegenS1Y15")
dfGrpMemb <- AllGroups(lstEnrolUsers$courseID, dfGroups, dfGroups_Memb, vecKeys)
lstEnrolUsers$users <- merge(lstEnrolUsers$users, dfGrpMemb, by.x = "moodleID", by.y = "userid")
# Create a grade data frame for all users in a given course
lstGrades <- AllGrades(lstEnrolUsers, dfGrades, dfGrade_Items)
dfGrade_Overv <- dcast(lstGrades$grades, moodleID + firstname + lastname + email + group ~ itemname, value.var = "finalgrade", fun.aggregate = max)
library(DBI)
library(dplyr)
library(reshape2)
# Get data from DB
con <- dbConnect(RMySQL::MySQL(),
#                   username = "public1",
#                   password = "test",
#                   host = "ec2-52-16-98-140.eu-west-1.compute.amazonaws.com",
username = "public1",
password = "test",
host = "127.0.0.1",
port = 3306,
dbname = "bitnami_moodle"
)
dbGetInfo(con)
dfUsers <- dbReadTable(conn = con, name = "mdl_user")
dfUsers <- dfUsers[which(dfUsers$deleted == 0),]
dfUser_Enrol <- dbReadTable(conn = con, name = "mdl_user_enrolments")
dfEnrol <- dbReadTable(conn = con, name = "mdl_enrol")
dfCourse <- dbReadTable(conn = con, name = "mdl_course")
dfGrade_Items <- dbReadTable(conn = con, name = "mdl_grade_items")
dfGrades <- dbReadTable(conn = con, name = "mdl_grade_grades")
dfGroups <- dbReadTable(conn = con, name = "mdl_groups")
dfGroups_Memb <- dbReadTable(conn = con, name = "mdl_groups_members")
dbDisconnect(con)
# Function to select all enrolled users in selected course
EnrolledUsers <- function(userdf, userenroldf, enroldf, coursedf, coursename = "CFA"){
courseID <- dfCourse$id[which(dfCourse$shortname == coursename)]
cat("Course ID is: ", courseID, "\n")
enrolID <- dfEnrol$id[which(dfEnrol$courseid == courseID)]
cat("Enrol ID is: ", enrolID, " and has class: ", class(enrolID),"\n")
enrolUserIDs <- dfUser_Enrol$userid[which(dfUser_Enrol$enrolid %in% enrolID)]
enrolUsers <- dfUsers[which(dfUsers$id %in% enrolUserIDs),]
return(list(coursename = coursename, courseID = courseID, users = enrolUsers))
}
# Function to select all grades in selected course (use function EnrolledUsers() to create first input variable)
AllGrades <- function(userslst, gradesdf, gradeitemsdf){
cat("Course ID is: ", userslst$courseID, "\n")
selItems <- dplyr::select(gradeitemsdf[which(gradeitemsdf$courseid == userslst$courseID),], id, itemname)
selItems <- na.omit(selItems)
selGrades <- dplyr::select(gradesdf[which(gradesdf$itemid %in% selItems$id),], itemid, userid, rawgrade, finalgrade)
selGrades <- dplyr::select(merge(selGrades, selItems, by.x = "itemid", by.y = "id"), userid, itemname, finalgrade)
selGrades <- merge(userslst$users, selGrades, by.x = "moodleID", by.y = "userid")
return(list(coursename = userslst$coursename, courseID = userslst$courseID, grades = selGrades))
}
# Function to create list with groups and members
AllGroups <- function(courseid, groupsdf, membersdf, keys){
cat("Course ID is: ", courseid, "\n")
groupsdf$description <- gsub("Key: ", "", groupsdf$description)
groupsdf$description <- gsub("<p>", "", groupsdf$description)
groupsdf$description <- gsub("</p>", "", groupsdf$description)
selGroups <- dplyr::select(groupsdf[which(groupsdf$courseid == courseid & groupsdf$description %in% keys),], id,
name, key = description)
selGrpMembers <- dplyr::select(merge(membersdf, selGroups, by.x = "groupid", by.y = "id"), userid, group = name, key)
return(selGrpMembers)
}
# Create list of users in a given course
lstEnrolUsers <- EnrolledUsers(dfUsers, dfUser_Enrol, dfEnrol, dfCourse, "CFA")
lstEnrolUsers$users <- select(lstEnrolUsers$users, firstname, lastname, email, moodleID = id)
# Attach groups to each user
vecKeys <- c("BMC01@ArnhemS1Y15",
"BMC02@ArnhemS1Y15",
"BMC03@ArnhemS1Y15",
"BMC01@NijmegenS1Y15",
"BMC02@NijmegenS1Y15",
"BMC03@NijmegenS1Y15",
"BMC04@NijmegenS1Y15",
"BMS01@ArnhemS1Y15",
"BMS01@NijmegenS1Y15")
dfGrpMemb <- AllGroups(lstEnrolUsers$courseID, dfGroups, dfGroups_Memb, vecKeys)
lstEnrolUsers$users <- merge(lstEnrolUsers$users, dfGrpMemb, by.x = "moodleID", by.y = "userid")
# Create a grade data frame for all users in a given course
lstGrades <- AllGrades(lstEnrolUsers, dfGrades, dfGrade_Items)
dfGrade_Overv <- dcast(lstGrades$grades, moodleID + firstname + lastname + email + group ~ itemname, value.var = "finalgrade", fun.aggregate = max)
library(DBI)
library(dplyr)
library(reshape2)
# Get data from DB
con <- dbConnect(RMySQL::MySQL(),
#                   username = "public1",
#                   password = "test",
#                   host = "ec2-52-16-98-140.eu-west-1.compute.amazonaws.com",
username = "public1",
password = "test",
host = "127.0.0.1",
port = 3306,
dbname = "bitnami_moodle"
)
dbGetInfo(con)
dfUsers <- dbReadTable(conn = con, name = "mdl_user")
dfUsers <- dfUsers[which(dfUsers$deleted == 0),]
dfUser_Enrol <- dbReadTable(conn = con, name = "mdl_user_enrolments")
dfEnrol <- dbReadTable(conn = con, name = "mdl_enrol")
dfCourse <- dbReadTable(conn = con, name = "mdl_course")
dfGrade_Items <- dbReadTable(conn = con, name = "mdl_grade_items")
dfGrades <- dbReadTable(conn = con, name = "mdl_grade_grades")
dfGroups <- dbReadTable(conn = con, name = "mdl_groups")
dfGroups_Memb <- dbReadTable(conn = con, name = "mdl_groups_members")
dbDisconnect(con)
# Function to select all enrolled users in selected course
EnrolledUsers <- function(userdf, userenroldf, enroldf, coursedf, coursename = "CFA"){
courseID <- dfCourse$id[which(dfCourse$shortname == coursename)]
cat("Course ID is: ", courseID, "\n")
enrolID <- dfEnrol$id[which(dfEnrol$courseid == courseID)]
cat("Enrol ID is: ", enrolID, " and has class: ", class(enrolID),"\n")
enrolUserIDs <- dfUser_Enrol$userid[which(dfUser_Enrol$enrolid %in% enrolID)]
enrolUsers <- dfUsers[which(dfUsers$id %in% enrolUserIDs),]
return(list(coursename = coursename, courseID = courseID, users = enrolUsers))
}
# Function to select all grades in selected course (use function EnrolledUsers() to create first input variable)
AllGrades <- function(userslst, gradesdf, gradeitemsdf){
cat("Course ID is: ", userslst$courseID, "\n")
selItems <- dplyr::select(gradeitemsdf[which(gradeitemsdf$courseid == userslst$courseID),], id, itemname)
selItems <- na.omit(selItems)
selGrades <- dplyr::select(gradesdf[which(gradesdf$itemid %in% selItems$id),], itemid, userid, rawgrade, finalgrade)
selGrades <- dplyr::select(merge(selGrades, selItems, by.x = "itemid", by.y = "id"), userid, itemname, finalgrade)
selGrades <- merge(userslst$users, selGrades, by.x = "moodleID", by.y = "userid")
return(list(coursename = userslst$coursename, courseID = userslst$courseID, grades = selGrades))
}
# Function to create list with groups and members
AllGroups <- function(courseid, groupsdf, membersdf, keys){
cat("Course ID is: ", courseid, "\n")
groupsdf$description <- gsub("Key: ", "", groupsdf$description)
groupsdf$description <- gsub("<p>", "", groupsdf$description)
groupsdf$description <- gsub("</p>", "", groupsdf$description)
selGroups <- dplyr::select(groupsdf[which(groupsdf$courseid == courseid & groupsdf$description %in% keys),], id,
name, key = description)
selGrpMembers <- dplyr::select(merge(membersdf, selGroups, by.x = "groupid", by.y = "id"), userid, group = name, key)
return(selGrpMembers)
}
# Create list of users in a given course
lstEnrolUsers <- EnrolledUsers(dfUsers, dfUser_Enrol, dfEnrol, dfCourse, "CFA")
lstEnrolUsers$users <- select(lstEnrolUsers$users, firstname, lastname, email, moodleID = id)
# Attach groups to each user
vecKeys <- c("BMC01@ArnhemS1Y15",
"BMC02@ArnhemS1Y15",
"BMC03@ArnhemS1Y15",
"BMC01@NijmegenS1Y15",
"BMC02@NijmegenS1Y15",
"BMC03@NijmegenS1Y15",
"BMC04@NijmegenS1Y15",
"BMS01@ArnhemS1Y15",
"BMS01@NijmegenS1Y15")
dfGrpMemb <- AllGroups(lstEnrolUsers$courseID, dfGroups, dfGroups_Memb, vecKeys)
lstEnrolUsers$users <- merge(lstEnrolUsers$users, dfGrpMemb, by.x = "moodleID", by.y = "userid")
# Create a grade data frame for all users in a given course
lstGrades <- AllGrades(lstEnrolUsers, dfGrades, dfGrade_Items)
dfGrade_Overv <- dcast(lstGrades$grades, moodleID + firstname + lastname + email + group ~ itemname, value.var = "finalgrade", fun.aggregate = max)
library(DBI)
library(dplyr)
library(reshape2)
# Get data from DB
con <- dbConnect(RMySQL::MySQL(),
#                   username = "public1",
#                   password = "test",
#                   host = "ec2-52-16-98-140.eu-west-1.compute.amazonaws.com",
username = "public1",
password = "test",
host = "127.0.0.1",
port = 3306,
dbname = "bitnami_moodle"
)
dbGetInfo(con)
dfUsers <- dbReadTable(conn = con, name = "mdl_user")
dfUsers <- dfUsers[which(dfUsers$deleted == 0),]
dfUser_Enrol <- dbReadTable(conn = con, name = "mdl_user_enrolments")
dfEnrol <- dbReadTable(conn = con, name = "mdl_enrol")
dfCourse <- dbReadTable(conn = con, name = "mdl_course")
dfGrade_Items <- dbReadTable(conn = con, name = "mdl_grade_items")
dfGrades <- dbReadTable(conn = con, name = "mdl_grade_grades")
dfGroups <- dbReadTable(conn = con, name = "mdl_groups")
dfGroups_Memb <- dbReadTable(conn = con, name = "mdl_groups_members")
dbDisconnect(con)
# Function to select all enrolled users in selected course
EnrolledUsers <- function(userdf, userenroldf, enroldf, coursedf, coursename = "CFA"){
courseID <- dfCourse$id[which(dfCourse$shortname == coursename)]
cat("Course ID is: ", courseID, "\n")
enrolID <- dfEnrol$id[which(dfEnrol$courseid == courseID)]
cat("Enrol ID is: ", enrolID, " and has class: ", class(enrolID),"\n")
enrolUserIDs <- dfUser_Enrol$userid[which(dfUser_Enrol$enrolid %in% enrolID)]
enrolUsers <- dfUsers[which(dfUsers$id %in% enrolUserIDs),]
return(list(coursename = coursename, courseID = courseID, users = enrolUsers))
}
# Function to select all grades in selected course (use function EnrolledUsers() to create first input variable)
AllGrades <- function(userslst, gradesdf, gradeitemsdf){
cat("Course ID is: ", userslst$courseID, "\n")
selItems <- dplyr::select(gradeitemsdf[which(gradeitemsdf$courseid == userslst$courseID),], id, itemname)
selItems <- na.omit(selItems)
selGrades <- dplyr::select(gradesdf[which(gradesdf$itemid %in% selItems$id),], itemid, userid, rawgrade, finalgrade)
selGrades <- dplyr::select(merge(selGrades, selItems, by.x = "itemid", by.y = "id"), userid, itemname, finalgrade)
selGrades <- merge(userslst$users, selGrades, by.x = "moodleID", by.y = "userid")
return(list(coursename = userslst$coursename, courseID = userslst$courseID, grades = selGrades))
}
# Function to create list with groups and members
AllGroups <- function(courseid, groupsdf, membersdf, keys){
cat("Course ID is: ", courseid, "\n")
groupsdf$description <- gsub("Key: ", "", groupsdf$description)
groupsdf$description <- gsub("<p>", "", groupsdf$description)
groupsdf$description <- gsub("</p>", "", groupsdf$description)
selGroups <- dplyr::select(groupsdf[which(groupsdf$courseid == courseid & groupsdf$description %in% keys),], id,
name, key = description)
selGrpMembers <- dplyr::select(merge(membersdf, selGroups, by.x = "groupid", by.y = "id"), userid, group = name, key)
return(selGrpMembers)
}
# Create list of users in a given course
lstEnrolUsers <- EnrolledUsers(dfUsers, dfUser_Enrol, dfEnrol, dfCourse, "CFA")
lstEnrolUsers$users <- select(lstEnrolUsers$users, firstname, lastname, email, moodleID = id)
# Attach groups to each user
vecKeys <- c("BMC01@ArnhemS1Y15",
"BMC02@ArnhemS1Y15",
"BMC03@ArnhemS1Y15",
"BMC01@NijmegenS1Y15",
"BMC02@NijmegenS1Y15",
"BMC03@NijmegenS1Y15",
"BMC04@NijmegenS1Y15",
"BMS01@ArnhemS1Y15",
"BMS01@NijmegenS1Y15")
dfGrpMemb <- AllGroups(lstEnrolUsers$courseID, dfGroups, dfGroups_Memb, vecKeys)
lstEnrolUsers$users <- merge(lstEnrolUsers$users, dfGrpMemb, by.x = "moodleID", by.y = "userid")
# Create a grade data frame for all users in a given course
lstGrades <- AllGrades(lstEnrolUsers, dfGrades, dfGrade_Items)
dfGrade_Overv <- dcast(lstGrades$grades, moodleID + firstname + lastname + email + group ~ itemname, value.var = "finalgrade", fun.aggregate = max)
View(dfGrade_Overv)
library(DBI)
library(dplyr)
library(reshape2)
# Get data from DB
con <- dbConnect(RMySQL::MySQL(),
#                   username = "public1",
#                   password = "test",
#                   host = "ec2-52-16-98-140.eu-west-1.compute.amazonaws.com",
username = "public1",
password = "test",
host = "127.0.0.1",
port = 3306,
dbname = "bitnami_moodle"
)
dbGetInfo(con)
dfUsers <- dbReadTable(conn = con, name = "mdl_user")
dfUsers <- dfUsers[which(dfUsers$deleted == 0),]
dfUser_Enrol <- dbReadTable(conn = con, name = "mdl_user_enrolments")
dfEnrol <- dbReadTable(conn = con, name = "mdl_enrol")
dfCourse <- dbReadTable(conn = con, name = "mdl_course")
dfGrade_Items <- dbReadTable(conn = con, name = "mdl_grade_items")
dfGrades <- dbReadTable(conn = con, name = "mdl_grade_grades")
dfGroups <- dbReadTable(conn = con, name = "mdl_groups")
dfGroups_Memb <- dbReadTable(conn = con, name = "mdl_groups_members")
dbDisconnect(con)
# Function to select all enrolled users in selected course
EnrolledUsers <- function(userdf, userenroldf, enroldf, coursedf, coursename = "CFA"){
courseID <- dfCourse$id[which(dfCourse$shortname == coursename)]
cat("Course ID is: ", courseID, "\n")
enrolID <- dfEnrol$id[which(dfEnrol$courseid == courseID)]
cat("Enrol ID is: ", enrolID, " and has class: ", class(enrolID),"\n")
enrolUserIDs <- dfUser_Enrol$userid[which(dfUser_Enrol$enrolid %in% enrolID)]
enrolUsers <- dfUsers[which(dfUsers$id %in% enrolUserIDs),]
return(list(coursename = coursename, courseID = courseID, users = enrolUsers))
}
# Function to select all grades in selected course (use function EnrolledUsers() to create first input variable)
AllGrades <- function(userslst, gradesdf, gradeitemsdf){
cat("Course ID is: ", userslst$courseID, "\n")
selItems <- dplyr::select(gradeitemsdf[which(gradeitemsdf$courseid == userslst$courseID),], id, itemname)
selItems <- na.omit(selItems)
selGrades <- dplyr::select(gradesdf[which(gradesdf$itemid %in% selItems$id),], itemid, userid, rawgrade, finalgrade)
selGrades <- dplyr::select(merge(selGrades, selItems, by.x = "itemid", by.y = "id"), userid, itemname, finalgrade)
selGrades <- merge(userslst$users, selGrades, by.x = "moodleID", by.y = "userid")
return(list(coursename = userslst$coursename, courseID = userslst$courseID, grades = selGrades))
}
# Function to create list with groups and members
AllGroups <- function(courseid, groupsdf, membersdf, keys){
cat("Course ID is: ", courseid, "\n")
groupsdf$description <- gsub("Key: ", "", groupsdf$description)
groupsdf$description <- gsub("<p>", "", groupsdf$description)
groupsdf$description <- gsub("</p>", "", groupsdf$description)
selGroups <- dplyr::select(groupsdf[which(groupsdf$courseid == courseid & groupsdf$description %in% keys),], id,
name, key = description)
selGrpMembers <- dplyr::select(merge(membersdf, selGroups, by.x = "groupid", by.y = "id"), userid, group = name, key)
return(selGrpMembers)
}
# Create list of users in a given course
lstEnrolUsers <- EnrolledUsers(dfUsers, dfUser_Enrol, dfEnrol, dfCourse, "CFA")
lstEnrolUsers$users <- select(lstEnrolUsers$users, firstname, lastname, email, moodleID = id)
# Attach groups to each user
vecKeys <- c("BMC01@ArnhemS1Y15",
"BMC02@ArnhemS1Y15",
"BMC03@ArnhemS1Y15",
"BMC01@NijmegenS1Y15",
"BMC02@NijmegenS1Y15",
"BMC03@NijmegenS1Y15",
"BMC04@NijmegenS1Y15",
"BMS01@ArnhemS1Y15",
"BMS01@NijmegenS1Y15")
dfGrpMemb <- AllGroups(lstEnrolUsers$courseID, dfGroups, dfGroups_Memb, vecKeys)
lstEnrolUsers$users <- merge(lstEnrolUsers$users, dfGrpMemb, by.x = "moodleID", by.y = "userid")
# Create a grade data frame for all users in a given course
lstGrades <- AllGrades(lstEnrolUsers, dfGrades, dfGrade_Items)
dfGrade_Overv <- dcast(lstGrades$grades, moodleID + firstname + lastname + email + group ~ itemname, value.var = "finalgrade", fun.aggregate = max)
library(DBI)
library(dplyr)
library(reshape2)
# Get data from DB
con <- dbConnect(RMySQL::MySQL(),
#                   username = "public1",
#                   password = "test",
#                   host = "ec2-52-16-98-140.eu-west-1.compute.amazonaws.com",
username = "public1",
password = "test",
host = "127.0.0.1",
port = 3306,
dbname = "bitnami_moodle"
)
dbGetInfo(con)
dfUsers <- dbReadTable(conn = con, name = "mdl_user")
dfUsers <- dfUsers[which(dfUsers$deleted == 0),]
dfUser_Enrol <- dbReadTable(conn = con, name = "mdl_user_enrolments")
dfEnrol <- dbReadTable(conn = con, name = "mdl_enrol")
dfCourse <- dbReadTable(conn = con, name = "mdl_course")
dfGrade_Items <- dbReadTable(conn = con, name = "mdl_grade_items")
dfGrades <- dbReadTable(conn = con, name = "mdl_grade_grades")
dfGroups <- dbReadTable(conn = con, name = "mdl_groups")
dfGroups_Memb <- dbReadTable(conn = con, name = "mdl_groups_members")
dbDisconnect(con)
# Function to select all enrolled users in selected course
EnrolledUsers <- function(userdf, userenroldf, enroldf, coursedf, coursename = "CFA"){
courseID <- dfCourse$id[which(dfCourse$shortname == coursename)]
cat("Course ID is: ", courseID, "\n")
enrolID <- dfEnrol$id[which(dfEnrol$courseid == courseID)]
cat("Enrol ID is: ", enrolID, " and has class: ", class(enrolID),"\n")
enrolUserIDs <- dfUser_Enrol$userid[which(dfUser_Enrol$enrolid %in% enrolID)]
enrolUsers <- dfUsers[which(dfUsers$id %in% enrolUserIDs),]
return(list(coursename = coursename, courseID = courseID, users = enrolUsers))
}
# Function to select all grades in selected course (use function EnrolledUsers() to create first input variable)
AllGrades <- function(userslst, gradesdf, gradeitemsdf){
cat("Course ID is: ", userslst$courseID, "\n")
selItems <- dplyr::select(gradeitemsdf[which(gradeitemsdf$courseid == userslst$courseID),], id, itemname)
selItems <- na.omit(selItems)
selGrades <- dplyr::select(gradesdf[which(gradesdf$itemid %in% selItems$id),], itemid, userid, rawgrade, finalgrade)
selGrades <- dplyr::select(merge(selGrades, selItems, by.x = "itemid", by.y = "id"), userid, itemname, finalgrade)
selGrades <- merge(userslst$users, selGrades, by.x = "moodleID", by.y = "userid")
return(list(coursename = userslst$coursename, courseID = userslst$courseID, grades = selGrades))
}
# Function to create list with groups and members
AllGroups <- function(courseid, groupsdf, membersdf, keys){
cat("Course ID is: ", courseid, "\n")
groupsdf$description <- gsub("Key: ", "", groupsdf$description)
groupsdf$description <- gsub("<p>", "", groupsdf$description)
groupsdf$description <- gsub("</p>", "", groupsdf$description)
selGroups <- dplyr::select(groupsdf[which(groupsdf$courseid == courseid & groupsdf$description %in% keys),], id,
name, key = description)
selGrpMembers <- dplyr::select(merge(membersdf, selGroups, by.x = "groupid", by.y = "id"), userid, group = name, key)
return(selGrpMembers)
}
# Create list of users in a given course
lstEnrolUsers <- EnrolledUsers(dfUsers, dfUser_Enrol, dfEnrol, dfCourse, "CFA")
lstEnrolUsers$users <- select(lstEnrolUsers$users, firstname, lastname, email, moodleID = id)
# Attach groups to each user
vecKeys <- c("BMC01@ArnhemS1Y15",
"BMC02@ArnhemS1Y15",
"BMC03@ArnhemS1Y15",
"BMC01@NijmegenS1Y15",
"BMC02@NijmegenS1Y15",
"BMC03@NijmegenS1Y15",
"BMC04@NijmegenS1Y15",
"BMS01@ArnhemS1Y15",
"BMS01@NijmegenS1Y15")
dfGrpMemb <- AllGroups(lstEnrolUsers$courseID, dfGroups, dfGroups_Memb, vecKeys)
lstEnrolUsers$users <- merge(lstEnrolUsers$users, dfGrpMemb, by.x = "moodleID", by.y = "userid")
# Create a grade data frame for all users in a given course
lstGrades <- AllGrades(lstEnrolUsers, dfGrades, dfGrade_Items)
dfGrade_Overv <- dcast(lstGrades$grades, moodleID + firstname + lastname + email + group ~ itemname, value.var = "finalgrade", fun.aggregate = max)
View(dfGrade_Overv)
View(dfGrade_Overv)
setwd("~/GitHub/Robert")
# Read text file (file should be in the same working directory as this script)
con <- file("antibiogram_raw.txt")
txtData <- readLines(con, warn = FALSE, skipNul = TRUE)
close(con)
# Clean up
txtData <- gsub("\t{1,}", ";", txtData)
txtData <- gsub("^Page", NA, txtData)
txtData <- gsub("Site:", "", txtData)
txtData <- gsub("^;$", NA, txtData)
txtData <- gsub("^Sensitive.*", "New", txtData)
txtData <- gsub("^;", "", txtData)
txtData <- gsub(";$", "", txtData)
txtData <- gsub("S;R;I", "Data", txtData)
txtData <- na.omit(txtData)
# Function to split vector into list
VectorToList <- function(vec, ind) {
n = 1
splitIndex <- which(vec == ind)
myList <- NULL
for (i in splitIndex[-length(splitIndex)]) {
myList[[n]] <- vec[(i+1):(splitIndex[n+1]-1)]
n <- n+1
}
return(myList)
}
# Function to split vector into data frame
VectorToDF <- function(vec, ind){
d <- which(vec[[1]] == ind)+1
l <- length(vec[[1]])
myDf <- data.frame(
matrix(unlist(
strsplit(
vec[[1]][d:l], split = ";", fixed = FALSE, perl = FALSE, useBytes = FALSE
)
)
, ncol = 4, byrow = TRUE
)
)
return(myDf)
}
# Function to select elements from list
SelectListItem <- function(lst, elnt = 1, lkp) {
itemVec <- sapply(lst, function(x) x[[elnt]][[1]]) # Create vector with all items from selected list element
myList <- lst[which(itemVec == lkp)] # Use which function on vector to create vector of indexnumbers and select items from original list
return(myList)
}
# Create list of separate vectors
txtList <- VectorToList(txtData, "New")
# Create list of lists with results in data frame
newList <- NULL
for (m in 1:length(txtList)) {
testresDf <- VectorToDF(txtList[m], "Data")
colnames(testresDf) <- c("Antibiotics", "S", "R", "I")
newList[[m]] <- list(bacteria = txtList[[m]][1], source = txtList[[m]][2], result = testresDf)
}
# Create data frame from list
newDF <- NULL
for (s in 1:length(newList)) {
cntRows <- length(newList[[s]]$result[,1])
bact <- rep_len(newList[[s]]$bacteria,cntRows)
srce <-  rep_len(newList[[s]]$source,cntRows)
tmpDF <- cbind(Bacteria = bact, Source = srce, newList[[s]]$result)
newDF <- rbind(newDF, tmpDF)
}
# Summarise by selected grouping
library(dplyr)
by_bacteria <- group_by(newDF, Bacteria, Antibiotics)
resistDF <- summarise(by_bacteria,
mean_S = mean(as.numeric(S)),
mean_R = mean(as.numeric(R)),
mean_I = mean(as.numeric(I))
)
View(resistDF)
# Battery.R
# This script computes the optimal battery size given a power consumption profile and maximum cable capacity
#
# Log:
# - Start  16-01-15: This script does all kinds of battery simulations (I have no idea which yet, but it has something to do with linear optimization).
# - Update 19-01-15: This script now calculates the optimal battery size to overcome the MSR peak load, isn't it awesome?!
# - Update 15-10-15: Made the script fit for a HAN workshop by breaking it and scaling it down a bit. (I have removed the most important line.)
#
# By Werner van Westering MSc.
# Start 16-01-2015
##Load packages
library(Rglpk)
library(data.table)
library(ggplot2)
#Set number of timesteps and profile
nvars = 10
Pload = c(15,0,0,0,5,6,7,8,9,0)
Pmax    = 5
#Setup Objective function
obj   = c(rep(0,nvars),1)
##Setup Constraints
#Setup signs
sign = c(rep("<=",nvars),rep(">=",nvars),rep("<=",nvars),rep(">=",nvars))
#Setup linear inequality constraints
Tmat = matrix(0,nvars,nvars)
Tmat[lower.tri(Tmat,diag=TRUE)] = 1
Amat = rbind(Tmat,Tmat,diag(-rep(1,nvars)),diag(-rep(1,nvars)))
Emat = c(rep(-1,nvars),rep(0,3*nvars))    #Set up storage variables
Amat = cbind(Amat,Emat)
bmat = matrix(c(rep(0,2*nvars),(rep(Pmax,nvars)-Pload),(rep(-Pmax,nvars)-Pload)),4*nvars,1)
#Setup bounds
bounds = list(lower = list(ind = c(1:(nvars+1)), val = c(rep(-Inf,nvars+1))),
upper = list(ind = c(1:(nvars+1)), val = c(rep(Inf,nvars+1))))
#Run optimization
A = Rglpk_solve_LP() #Add the correct arguments
#Plot resuls
X = data.frame(time = 1:nvars,P_use=A$solution[1:nvars])
ggplot(X,aes(x=time,y=P_use))+geom_line()
print(paste('The optimal battery size is:',A$solution[nvars+1],'kWh'))
install.packages("Rglpk")
